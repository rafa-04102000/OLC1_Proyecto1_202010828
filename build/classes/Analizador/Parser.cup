package Analizador;
import java_cup.runtime.*;
import java.util.ArrayList;         // importar arraylist
import Errores.Excepcion;           // importar la clase de errores
import Estructuras.ExpresionRG;
import java.util.Collections;

//PARSER 
parser code
{://Codigo visible
    
    public ArrayList<ExpresionRG> expresiones_regulares=new ArrayList<ExpresionRG>();
    public ArrayList<String> simbolos=new ArrayList<String>();
    // simbolos.add("#");
    ///  declarar un arraylist para los errores sintacticos 
    public  ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , "Fila: " + Integer.toString(s.left+1),"Columna: " + Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , "Fila: " + Integer.toString(s.left+1),"Columna: " + Integer.toString(s.right+1) ));
    }
:}



terminal String EXCLAMACION,COMILLA_DOBLE,NUMERAL,DOLAR,SEPARADOR,PORCENTAJE,AMPERSAND,COMILLA,PAR_IZQ,PAR_DER,POR,MAS,COMA,MENOS_GUION,PUNTO,SALTO,DIV_BARRA;
terminal String DOBLE_PUNTO,PTCOMA,MENORQ,IGUAL,MAYORQ,INTERROGACION,ARROBA;
terminal String COR_IZQ,BARRA_INV,COR_DER,ELVACION,GUION_BAJO,ACENTO;
terminal String LLAVE_IZQ,OR,LLAVE_DER,VERGULILLA;
// terminal String COMA,MENOS_GUION,DOBLE_PUNTO,PTCOMA,MAYORQ,LLAVE_IZQ,LLAVE_DER,VERGULILLA,PUNTO,OR,COMILLA_DOBLE,POR;
terminal String RCONJUNTO;
// terminal String ENTERO;
// terminal String LETRAS;
terminal String TEXTO;


non terminal ini;                                   // terminales para las transiciones 
non terminal lenguaje;

non terminal sentencias;
non terminal sentencia;

non terminal sentencias2;
non terminal sentencia2;

non terminal sentencias3;
non terminal sentencia3;

non terminal conjunto;
non terminal expresion;
non terminal caracteres;
non terminal caracter;


// -------------------------------


// precedence right POR,PAR_IZQ,PAR_DER; 
precedence left EXCLAMACION,NUMERAL,DOLAR,PORCENTAJE,AMPERSAND,MENOS_GUION,SALTO,DIV_BARRA,MENORQ,MAYORQ,IGUAL,INTERROGACION,ARROBA,BARRA_INV,ELVACION,GUION_BAJO,ACENTO; 
precedence left DOBLE_PUNTO,PTCOMA,COMA,VERGULILLA;
precedence left SEPARADOR,COMILLA,COMILLA_DOBLE;
// precedencia de operadores 
precedence left OR,PUNTO,POR,MAS,LLAVE_IZQ,LLAVE_DER,PAR_IZQ,PAR_DER;



start with ini;    

ini::=lenguaje;

lenguaje::= LLAVE_IZQ:a sentencias:b LLAVE_DER:c {:System.out.println("SENTENCIAS :" + a + b + c );:}
;

sentencias ::= sentencia:a sentencias  {:RESULT=a;/*System.out.println("entro? ")*/;:}
| sentencias2:a {:RESULT=a;/*sentencia:a sentencias2 */;:}

;

sentencia ::= RCONJUNTO:a DOBLE_PUNTO:b TEXTO:c MENOS_GUION:d MAYORQ:e conjunto:f PTCOMA:g {:System.out.println("El conjunto es: " + a + b + c + d +  e + f + g);:}
| error:a PTCOMA {:System.out.println("HUBO UN ERROR XDDDDDDDDDDD" + a);:}
;


sentencias2 ::= sentencia2:a sentencias2  {:RESULT=a;/*System.out.println("entro? ")*/;:}
|sentencia2 SEPARADOR:a SEPARADOR:b sentencias3 {: /*System.out.println("Vino el separador al lado tiene que ir sentencia 3" + a);*/:}
;

sentencia2 ::= TEXTO:a MENOS_GUION:b MAYORQ:c expresion:d PTCOMA:e {:
System.out.println("la expresion es: " + a + b + c + d +  e);
Collections.reverse(parser.simbolos);
ArrayList<String> copia_simbolos = (ArrayList<String>) parser.simbolos.clone();


ExpresionRG ex = new ExpresionRG((String) a,copia_simbolos,(String) d);
parser.expresiones_regulares.add(ex);
parser.simbolos.clear();
:}
;


sentencias3 ::= sentencia3:a sentencias3  {:RESULT=a;/*System.out.println("entro? ")*/;:}
 | sentencia3:a {:RESULT=a;/*System.out.println("solo una")*/;:}
;

sentencia3 ::= TEXTO:a DOBLE_PUNTO:b COMILLA_DOBLE:c TEXTO:d COMILLA_DOBLE:e PTCOMA:f {:System.out.println("La oracion a evaluar es: " + a + b + c + d + e + f);:}

;


///////////DEFINICION DE CONJUNTOS
conjunto ::= conjunto:a COMA conjunto:b {:
String cadena= (String) a + ",";
cadena +=(String) b;
//System.out.println("RECONOCE JUNTO SOLO LO PRIMERO:" +cadena);
RESULT=cadena;
:}

|conjunto:a VERGULILLA conjunto:b {:
String cadena= (String) a + "~";
cadena +=(String) b;
RESULT=cadena;
:}

|EXCLAMACION:a    {:RESULT=a;:}
|BARRA_INV:a COMILLA_DOBLE:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
RESULT=cadena;:}

|COMILLA_DOBLE:a    {:RESULT=a;:}
|NUMERAL:a    {:RESULT=a;:}
|DOLAR:a    {:RESULT=a;:}
|PORCENTAJE:a    {:RESULT=a;:}
|AMPERSAND:a    {:RESULT=a;:}
|BARRA_INV:a COMILLA:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
RESULT=cadena;:}
|COMILLA:a    {:RESULT=a;:}
|PAR_IZQ:a    {:RESULT=a;:}
|PAR_DER:a    {:RESULT=a;:}
|POR:a    {:RESULT=a;:}
|MAS:a    {:RESULT=a;:}
|COMA:a    {:RESULT=a;:}
|MENOS_GUION:a    {:RESULT=a;:}
|PUNTO:a    {:RESULT=a;:}
|SALTO:a    {:RESULT=a;:}
|DIV_BARRA:a    {:RESULT=a;:}

|DOBLE_PUNTO:a    {:RESULT=a;:}
|PTCOMA:a    {:RESULT=a;:}
|MENORQ:a    {:RESULT=a;:}
|IGUAL:a    {:RESULT=a;:}
|MAYORQ:a    {:RESULT=a;:}
|INTERROGACION:a    {:RESULT=a;:}
|ARROBA:a    {:RESULT=a;:}


|COR_IZQ:a    {:RESULT=a;:}
|BARRA_INV:a    {:RESULT=a;:}
|COR_DER:a    {:RESULT=a;:}
|ELVACION:a    {:RESULT=a;:}
|GUION_BAJO:a    {:RESULT=a;:}
|ACENTO:a    {:RESULT=a;:}


|LLAVE_IZQ:a    {:RESULT=a;:}
|OR:a    {:RESULT=a;:}
|LLAVE_DER:a    {:RESULT=a;:}
|VERGULILLA:a    {:RESULT=a;:}

|TEXTO:a    {:RESULT=a;:}


| error {:System.out.println("TRONO ACA");:}
;

//DEFINICION DE EXPRESION simbolo expresion para recursividad
expresion ::= 
PUNTO:a expresion:b  {:
String cadena= (String) a;
cadena +=(String) b;

System.out.println("simbolo: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}
| OR:a expresion:b  {:
String cadena= (String) a;
cadena +=(String) b;

System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}
| POR:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| INTERROGACION:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| MAS:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

|BARRA_INV:a COMILLA_DOBLE:b   expresion:c {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add(cadena);
cadena +=(String) b + (String) c;
System.out.println("texto: " + cadena);

RESULT=cadena;:}

|BARRA_INV:a COMILLA_DOBLE:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
System.out.println("texto: " + cadena);
parser.simbolos.add(cadena);

RESULT=cadena;:}

|BARRA_INV:a COMILLA:b  expresion:c  {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add(cadena);
cadena +=(String) b + (String) c;
System.out.println("texto: " + cadena);

RESULT=cadena;:}

|BARRA_INV:a COMILLA:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add(cadena);
System.out.println("texto: " + cadena);

RESULT=cadena;:}


|SALTO:a  expresion:c  {:
String cadena= (String) a  ;
cadena +=(String) c;
parser.simbolos.add((String) a);
System.out.println("texto: " + cadena);
RESULT=cadena;

:}

|SALTO:a    {:
System.out.println("texto: " + a);
parser.simbolos.add((String) a);
RESULT=a;

:}



| COMILLA_DOBLE caracteres:a COMILLA_DOBLE expresion:b {:
String cadena= (String) a  ;
cadena +=(String) b;
// System.out.println("esto me manda la cadena"+ cadena);

System.out.println("caracteres primero: " + a);
parser.simbolos.add((String) a + "§");
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| COMILLA_DOBLE caracteres:a COMILLA_DOBLE  {:
// System.out.println("esto me manda"+a);
System.out.println("caracteres primero solo: " + a);
parser.simbolos.add((String) a + "§");
RESULT=a;

:}

| COMILLA_DOBLE COMILLA_DOBLE expresion:b {:
String cadena= "espacio" + (String) b  ;

// System.out.println("esto me manda la cadena"+ cadena);

System.out.println("biene espacio: " + "espacio");
parser.simbolos.add("espacio");
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| COMILLA_DOBLE COMILLA_DOBLE{:
String cadena= "espacio" ;

// System.out.println("esto me manda la cadena"+ cadena);

System.out.println("biene espacio: " + "espacio");
parser.simbolos.add("espacio");
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}


| LLAVE_IZQ:a TEXTO:b LLAVE_DER:c expresion:d{:
String cadena= (String) a ;
cadena +=(String) b+(String) c+(String) d;
//System.out.println("a es: " +a + "b es: " + b + "c es: "+ "d es: " + d);
System.out.println("texto: " + b);
parser.simbolos.add((String) b);

RESULT=cadena;
:}

| LLAVE_IZQ:a TEXTO:b LLAVE_DER:c {:
String cadena= (String) a ;

cadena +=(String) b+(String) c;
//System.out.println("a es: " +a + "b es: " + b + "c es: " + c);

System.out.println("texto: " + b);
parser.simbolos.add((String) b);

/*---------*/
RESULT=cadena;
:}









;

// aca puedo meter los \~ asi los caracteres para qu elos reconozca
caracteres ::= caracter:a caracteres:b {:
String cadena= (String) a  ;
cadena +=(String) b;
RESULT=cadena;
// System.out.println("caracteres doble: " + a);
:}
|caracter:a {:RESULT=a;
// System.out.println("caracteres: " + a);
:}
;


// comila doble debe de ir con \, y tambien comilla normal con  \
caracter::= TEXTO:a {:RESULT=a;:}
|EXCLAMACION:a  {:RESULT=a;:}
|BARRA_INV:a COMILLA_DOBLE:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
RESULT=cadena;:}



|NUMERAL:a    {:RESULT=a;:}
|DOLAR:a    {:RESULT=a;:}
|PORCENTAJE:a    {:RESULT=a;:}
|AMPERSAND:a    {:RESULT=a;:}
|BARRA_INV:a COMILLA:b   {:
String cadena= (String) a  ;
cadena +=(String) b;
RESULT=cadena;:}
|COMILLA:a  {:RESULT=a;:}
|PAR_IZQ:a    {:RESULT=a;:}
|PAR_DER:a    {:RESULT=a;:}
|POR:a    {:RESULT=a;:}
|MAS:a    {:RESULT=a;:}
|COMA:a    {:RESULT=a;:}
|MENOS_GUION:a    {:RESULT=a;:}
|PUNTO:a    {:RESULT=a;:}
|SALTO:a    {:RESULT=a;:}
|DIV_BARRA:a    {:RESULT=a;:}

|DOBLE_PUNTO:a    {:RESULT=a;:}
|PTCOMA:a    {:RESULT=a;:}
|MENORQ:a    {:RESULT=a;:}
|IGUAL:a    {:RESULT=a;:}
|MAYORQ:a    {:RESULT=a;:}
|INTERROGACION:a    {:RESULT=a;:}
|ARROBA:a    {:RESULT=a;:}

|COR_IZQ:a    {:RESULT=a;:}
|BARRA_INV:a    {:RESULT=a;:}
|COR_DER:a    {:RESULT=a;:}
|ELVACION:a    {:RESULT=a;:}
|GUION_BAJO:a    {:RESULT=a;:}
|ACENTO:a    {:RESULT=a;:}

|LLAVE_IZQ:a    {:RESULT=a;:}
|OR:a    {:RESULT=a;:}
|LLAVE_DER:a    {:RESULT=a;:}
|VERGULILLA:a    {:RESULT=a;:}

;