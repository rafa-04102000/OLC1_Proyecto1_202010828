package Analizador;
import java_cup.runtime.*;
import java.util.ArrayList;         // importar arraylist
import Errores.Excepcion;           // importar la clase de errores
import Estructuras.ExpresionRG;
import java.util.Collections;

//PARSER 
parser code
{://Codigo visible
    
    public ArrayList<ExpresionRG> expresiones_regulares=new ArrayList<ExpresionRG>();
    public ArrayList<String> simbolos=new ArrayList<String>();
    // simbolos.add("#");
    ///  declarar un arraylist para los errores sintacticos 
    public  ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , "Fila: " + Integer.toString(s.left+1),"Columna: " + Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , "Fila: " + Integer.toString(s.left+1),"Columna: " + Integer.toString(s.right+1) ));
    }
:}


terminal String RCONJUNTO,SALTO_LINEA,COMILLA_SIMPLE_ESPECIAL,COMILLA_DOBLE_ESPECIAL,flecha,SEPARADOR;
terminal String EXCLAMACION,COMILLA_DOBLE, NUMERAL,DOLAR,PORCENTAJE,AMPERSAND,COMILLA,PAR_IZQ,PAR_DER;
terminal String KLEENE,POSITIVA, COMA,GUION,DIV_BARRA,CONCATENACION,DOBLE_PUNTO,PTCOMA,MENOR_QUE,IGUAL,MAYOR_QUE;
terminal String OPCIONAL,ARROBA,COR_IZQ, BARRA_INV, COR_DER,ELVACION,GUION_BAJO,ACENTO,LLAVE_IZQ,OR,LLAVE_DER,VERGULILLA;
terminal String ENTERO,LETRA,ID,CADENA;


non terminal ini;   // terminales para las transiciones
non terminal lenguaje;

non terminal sentencias;
non terminal sentencia;

non terminal sentencias2;
non terminal sentencia2;

non terminal sentencias3;
non terminal sentencia3;

non terminal conjunto;
non terminal expresion;


// precedence right POR,PAR_IZQ,PAR_DER;
precedence left SALTO_LINEA,COMILLA_SIMPLE_ESPECIAL,COMILLA_DOBLE_ESPECIAL,flecha,SEPARADOR;
precedence left EXCLAMACION,COMILLA_DOBLE,NUMERAL,DOLAR,PORCENTAJE,AMPERSAND,COMILLA;
precedence left COMA,GUION,DIV_BARRA,DOBLE_PUNTO,PTCOMA,MENOR_QUE,IGUAL,MAYOR_QUE;
precedence left ARROBA,BARRA_INV,GUION_BAJO,ACENTO,VERGULILLA,ENTERO,LETRA;
// precedencia de operadores
precedence left OR,CONCATENACION,OPCIONAL,KLEENE,POSITIVA,LLAVE_IZQ,LLAVE_DER,PAR_IZQ,PAR_DER;



start with ini;
// GRAMATICAS

ini::=lenguaje;

lenguaje::= LLAVE_IZQ:a sentencias:b LLAVE_DER:c ;

sentencias ::= sentencia sentencias
| sentencias2
;

sentencia ::= RCONJUNTO:a DOBLE_PUNTO:b ID:c flecha:d conjunto:e PTCOMA:f  {:System.out.println("El conjunto es: " + a + b + c + d +  e + f);:}
| error:a PTCOMA 
;


sentencias2 ::= sentencia2:a sentencias2  {:RESULT=a;/*System.out.println("entro? ")*/;:}
|sentencia2 SEPARADOR SEPARADOR sentencias3
;

sentencia2 ::= ID:a flecha:b  expresion:c PTCOMA:d {:
System.out.println("la expresion es: " + a + b + c + d);
Collections.reverse(parser.simbolos);
ArrayList<String> copia_simbolos = (ArrayList<String>) parser.simbolos.clone();


ExpresionRG ex = new ExpresionRG((String) a,copia_simbolos,(String) d);
parser.expresiones_regulares.add(ex);
parser.simbolos.clear();
:}
;


sentencias3 ::= sentencia3:a sentencias3  {:RESULT=a;/*System.out.println("entro? ")*/;:}
 | sentencia3:a {:RESULT=a;/*System.out.println("solo una")*/;:}
;

sentencia3 ::= ID:a DOBLE_PUNTO:b CADENA:c PTCOMA:d{:System.out.println("La oracion a evaluar es: " + a + b + c+d);:}

;


//Definicion de Conjunto
conjunto ::= conjunto:a COMA conjunto:b {:
String cadena= (String) a + ",";
cadena +=(String) b;
//System.out.println("RECONOCE JUNTO SOLO LO PRIMERO:" +cadena);
RESULT=cadena;
:}
|conjunto:a VERGULILLA conjunto:b {:
String cadena= (String) a + "-";
cadena +=(String) b;
RESULT=cadena;
:}

|EXCLAMACION:a    {:RESULT=a;:}
|COMILLA_DOBLE:a    {:RESULT=a;:}
|NUMERAL:a    {:RESULT=a;:}
|DOLAR:a    {:RESULT=a;:}
|PORCENTAJE:a    {:RESULT=a;:}
|AMPERSAND:a    {:RESULT=a;:}
|COMILLA:a    {:RESULT=a;:}
|PAR_IZQ:a    {:RESULT=a;:}
|PAR_DER:a    {:RESULT=a;:}
|KLEENE:a    {:RESULT=a;:}
|POSITIVA:a    {:RESULT=a;:}
|COMA:a    {:RESULT=a;:}
|GUION:a    {:RESULT=a;:}
|DIV_BARRA:a    {:RESULT=a;:}
|CONCATENACION:a    {:RESULT=a;:}


|DOBLE_PUNTO:a    {:RESULT=a;:}
|PTCOMA:a    {:RESULT=a;:}
|MENOR_QUE:a    {:RESULT=a;:}
|IGUAL:a    {:RESULT=a;:}
|MAYOR_QUE:a    {:RESULT=a;:}
|OPCIONAL:a    {:RESULT=a;:}
|ARROBA:a    {:RESULT=a;:}


|COR_IZQ:a    {:RESULT=a;:}
|BARRA_INV:a    {:RESULT=a;:}
|COR_DER:a    {:RESULT=a;:}
|ELVACION:a    {:RESULT=a;:}
|GUION_BAJO:a    {:RESULT=a;:}
|ACENTO:a    {:RESULT=a;:}


|LLAVE_IZQ:a    {:RESULT=a;:}
|OR:a    {:RESULT=a;:}
|LLAVE_DER:a    {:RESULT=a;:}
|VERGULILLA:a    {:RESULT=a;:}
|ENTERO:a    {:RESULT=a;:}
|LETRA:a    {:RESULT=a;:}


| error {:System.out.println("TRONO ACA");:}
;

//DEFINICION DE EXPRESION simbolo expresion para recursividad
expresion ::= 
CONCATENACION:a expresion:b  {:
String cadena= (String) a;
cadena +=(String) b;

// System.out.println("simbolo: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| OR:a expresion:b  {:
String cadena= (String) a;
cadena +=(String) b;

// System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| KLEENE:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

// System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| OPCIONAL:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

// System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| POSITIVA:a expresion:b {:
String cadena= (String) a ;
cadena +=(String) b;

// System.out.println("simbolo a: " + a);
parser.simbolos.add((String) a);
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

|COMILLA_DOBLE_ESPECIAL:a  expresion:b {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add(a);
// System.out.println("texto: " + cadena);

RESULT=cadena;:}

|COMILLA_DOBLE_ESPECIAL:a   {:
String cadena= (String) a  ;
// System.out.println("texto: " + cadena);
parser.simbolos.add(cadena);

RESULT=cadena;:}

|COMILLA_SIMPLE_ESPECIAL:a  expresion:b  {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add(a);
// System.out.println("texto: " + cadena);

RESULT=cadena;:}

|COMILLA_SIMPLE_ESPECIAL:a  {:
String cadena= (String) a  ;
parser.simbolos.add(cadena);
// System.out.println("texto: " + cadena);

RESULT=cadena;:}


|SALTO_LINEA:a  expresion:b  {:
String cadena= (String) a  ;
cadena +=(String) b;
parser.simbolos.add((String) a);
// System.out.println("texto: " + cadena);
RESULT=cadena;

:}

|SALTO_LINEA:a    {:
// System.out.println("texto: " + a);
parser.simbolos.add((String) a);
RESULT=a;

:}



| CADENA:a expresion:b {:
String cadena= (String) a.replace("\"", "")  ;
cadena +=(String) b;
// System.out.println("esto me manda la cadena"+ cadena);

// System.out.println("caracteres primero: " + a);
parser.simbolos.add((String) a.replace("\"", "") + "§");
// System.out.println("simbolo b: " + b);

RESULT=cadena;
:}

| CADENA:a  {:
// System.out.println("esto me manda"+a);
// System.out.println("caracteres primero solo: " + a);
parser.simbolos.add((String) a.replace("\"", "") + "§");
RESULT=a;

:}

| LLAVE_IZQ:a ID:b LLAVE_DER:c expresion:d{:
String cadena= (String) a ;
cadena +=(String) b+(String) c+(String) d;
//System.out.println("a es: " +a + "b es: " + b + "c es: "+ "d es: " + d);
// System.out.println("texto: " + b);
parser.simbolos.add((String) b);

RESULT=cadena;
:}

| LLAVE_IZQ:a ID:b LLAVE_DER:c {:
String cadena= (String) a ;

cadena +=(String) b+(String) c;
//System.out.println("a es: " +a + "b es: " + b + "c es: " + c);

// System.out.println("texto: " + b);
parser.simbolos.add((String) b);

/*---------*/
RESULT=cadena;
:}
;

